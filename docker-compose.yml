version: "3.9"

services:
  gateway:
    container_name: gateway
    build:
      context: ./services/gateway
      dockerfile: Dockerfile
    ports:
      - 8000:8000
    volumes:
      - ./services/gateway/:/go/src/app

  logger:
    container_name: logger
    build:
      context: ./services/logger
      dockerfile: Dockerfile
    environment:
      MONGO_URI: mongodb://mongo:27017
      MONGO_DB_NAME: logs
      MONGO_ROOT_USERNAME: admin
      MONGO_ROOT_PASSWORD: password
      RPC_PORT: :5001
      GRPC_PORT: :50051
    volumes:
      - ./services/logger/:/go/src/app

  auth:
    container_name: auth
    build:
      context: ./services/auth
      dockerfile: Dockerfile
    environment:
      DB_HOST: auth_db
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: password
      DB_NAME: auth
      DB_SSLMODE: disable
      DB_TIMEZONE: America/Sao_Paulo
      DB_CONNECT_TIMEOUT: 5
    depends_on:
      auth_db:
        condition: service_healthy
    volumes:
      - ./services/auth/:/go/src/app

  transactions:
    container_name: transactions
    build:
      context: ./services/transactions
      dockerfile: Dockerfile
    environment:
      DB_HOST: transactions_db
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: password
      DB_NAME: transactions
      DB_SSLMODE: disable
      DB_TIMEZONE: America/Sao_Paulo
      DB_CONNECT_TIMEOUT: 5
    depends_on:
      transactions_db:
        condition: service_healthy
    volumes:
      - ./services/transactions/:/go/src/app

# ############################################
  mongo:
    container_name: mongo
    image: "mongo:4.2.16-bionic"
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: logs
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - ./db-data/mongo/:/data/db

  auth_db:
    image: 'postgres:14.2'
    ports:
      - "5432:5432"
    deploy:
      mode: replicated
      replicas: 1
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: auth
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 5s
    volumes:
      - ./db-data/auth_db/:/var/lib/postgresql/data/

  transactions_db:
    image: 'postgres:14.2'
    ports:
      - "5433:5432"
    deploy:
      mode: replicated
      replicas: 1
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: transactions
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 5s
    volumes:
      - ./db-data/transactions_db/:/var/lib/postgresql/data/
